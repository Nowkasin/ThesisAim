//
//  notification.swift
//  BeActive
//
//  Created by Kasin Thappawan on 28/10/2567 BE.
//

import Foundation
import UserNotifications
import AudioToolbox


class AlertsManager {
    var isWaterAlertActive = false
    var isAlertActive = false
    var isHeartRateAlertActive = false
    var soundID: SystemSoundID = 1005 // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö SoundID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏´‡∏¢‡∏∏‡∏î   

    func triggerWaterAlert() {
        print("Attempting to trigger water alert...")

        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            let existingRequests = requests.filter { $0.identifier == "waterReminder" }

            if !existingRequests.isEmpty {
                print("Skipping water alert: Already scheduled.")
                return
            }

            let content = UNMutableNotificationContent()
            content.title = "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
            content.body = "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!"
            content.sound = .default

            let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1800, repeats: true)  // ‚è≥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
            let request = UNNotificationRequest(identifier: "waterReminder", content: content, trigger: trigger)

            UNUserNotificationCenter.current().add(request) { error in
                if let error = error {
                    print("Error triggering water reminder notification: \(error.localizedDescription)")
                } else {
                    print("Water reminder notification scheduled successfully")
                    self.isWaterAlertActive = true
                }
            }
        }
    }

    private func removeOldWaterAlert() {
        // ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        UNUserNotificationCenter.current().removeDeliveredNotifications(withIdentifiers: ["waterReminder"])
    }

    private func checkAndScheduleWaterAlert() {
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            let existingRequests = requests.filter { $0.identifier == "waterReminder" }

            if existingRequests.isEmpty {
                self.triggerWaterAlert()  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà
            } else {
                print("Water reminder is already scheduled.")
            }
        }
    }


        
        func triggerMoveAlert() {
            if !isAlertActive { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                let content = UNMutableNotificationContent()
                content.title = "‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
                content.body = "‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏±‡πà‡∏á‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
                content.sound = .default

                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)

                UNUserNotificationCenter.current().add(request) { error in
                    if let error = error {
                        print("Error triggering notification: \(error.localizedDescription)")
                    } else {
                        print("Notification scheduled successfully")
                        self.isAlertActive = true  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                        print("isAlertActive set to true")

                        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
                        self.scheduleNextAlertAfterDelay()  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ resetTimer parameter
                    }
                }
            } else {
                print("Alert is already active, waiting for 1 hour.")
            }
        }

        private func scheduleNextAlertAfterDelay() {
            print("Starting 5 minute delay")

            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ DispatchQueue
            DispatchQueue.main.asyncAfter(deadline: .now() + 3600) { // 3600 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                self.isAlertActive = false  // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                print("5 minutes passed, isAlertActive set to false")
                
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                self.triggerMoveAlert()  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
            }
        }


    func triggerHeartRateAlert() {
        print("üö® Attempting to trigger heart rate alert...")

        if isHeartRateAlertActive {
            print("‚ö†Ô∏è Heart rate alert is already active, skipping new alert.")
            return
        }

        isHeartRateAlertActive = true

        let content = UNMutableNotificationContent()
        content.title = "üö® ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á!"
        content.body = "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
        
        // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
        content.sound = UNNotificationSound.defaultCriticalSound(withAudioVolume: 1.0)
        content.badge = NSNumber(value: 1)

        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        let request = UNNotificationRequest(identifier: "heartRateAlert_\(UUID().uuidString)", content: content, trigger: trigger)

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥
        UNUserNotificationCenter.current().getPendingNotificationRequests { requests in
            let existingRequests = requests.filter { $0.identifier.contains("heartRateAlert") }

            if existingRequests.isEmpty {
                UNUserNotificationCenter.current().add(request) { error in
                    if let error = error {
                        print("‚ùå Error triggering heart rate alert: \(error.localizedDescription)")
                    } else {
                        print("‚úÖ Heart rate alert scheduled successfully")
                        self.playSystemAlarm() // ‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                    }
                }
            } else {
                print("‚ö†Ô∏è A similar heart rate alert is already pending, skipping duplicate.")
            }
        }

        scheduleNextHeartRateAlertAfterDelay()
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á 1005 (Alarm)
    func playSystemAlarm() {
        print("üîä Playing System Sound 1005 (Alarm)")
        AudioServicesPlaySystemSound(soundID) // üö® ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏¢‡∏∏‡∏î
    func stopSystemAlarm() {
        print("üîá Stopping System Sound 1005 (Alarm)")
        AudioServicesDisposeSystemSoundID(soundID) // üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    }

    // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (90 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    private func scheduleNextHeartRateAlertAfterDelay() {
        print("‚è≥ Starting 90-second cooldown for heart rate alert")

        DispatchQueue.main.asyncAfter(deadline: .now() + 90) {
            self.isHeartRateAlertActive = false
            print("‚úÖ 90 seconds passed, isHeartRateAlertActive set to false")

            self.stopSystemAlarm() // üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        }
    }

}
