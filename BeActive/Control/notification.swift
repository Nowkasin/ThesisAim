//
//  notification.swift
//  BeActive
//
//  Created by Kasin Thappawan on 28/10/2567 BE.
//

import Foundation
import UserNotifications
import AudioToolbox

class AlertsManager {
    var isWaterAlertActive = false
    var isAlertActive = false
    var isHeartRateAlertActive = false
    var soundID: SystemSoundID = 1005
    var wakeUpTime: DateComponents? // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà user ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    var bedTime: DateComponents? // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô‡∏ó‡∏µ‡πà user ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    var intervalHours: Int? // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏∑‡πà‡∏ô-‡∏ô‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô 8 ‡πÇ‡∏°‡∏á ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á 4 ‡∏ó‡∏∏‡πà‡∏°)
    func setWakeUpAndBedTime(wakeUp: DateComponents?, bed: DateComponents?, interval: Int?) {
        self.wakeUpTime = wakeUp
        self.bedTime = bed
        self.intervalHours = interval
        removeAllWaterAlerts()
        scheduleWaterAlerts()
    }

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏≤‡∏ó‡∏µ
    public func scheduleWaterAlerts() {
        let startHour = wakeUpTime?.hour ?? 8
        let startMinute = wakeUpTime?.minute ?? 0
        let endHour = bedTime?.hour ?? 22
        let endMinute = bedTime?.minute ?? 0
        let interval = intervalHours ?? 1

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        let notificationTimes = generateNotificationTimes(
            startHour: startHour,
            startMinute: startMinute,
            endHour: endHour,
            endMinute: endMinute,
            interval: interval
        )

        for (index, time) in notificationTimes.enumerated() {
            let content = UNMutableNotificationContent()
            content.title = "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
            content.body = "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!"
            content.sound = .default

            let trigger = UNCalendarNotificationTrigger(dateMatching: time, repeats: true)
            let request = UNNotificationRequest(identifier: "waterReminder_\(index)", content: content, trigger: trigger)

            UNUserNotificationCenter.current().add(request) { error in
                if let error = error {
                    print("Error scheduling water reminder: \(error.localizedDescription)")
                } else {
                    print("‚úÖ Water reminder scheduled at \(time.hour ?? 0):\(time.minute ?? 0)")
                }
            }
        }
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÅ‡∏•‡∏∞ ‡∏ô‡∏≤‡∏ó‡∏µ
    private func generateNotificationTimes(startHour: Int, startMinute: Int, endHour: Int, endMinute: Int, interval: Int) -> [DateComponents] {
        var times: [DateComponents] = []
        var currentHour = startHour
        var currentMinute = startMinute

        while currentHour < endHour || (currentHour == endHour && currentMinute <= endMinute) {
            times.append(DateComponents(hour: currentHour, minute: currentMinute))

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏° interval ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            currentHour += interval

            // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô endHour
            if currentHour > endHour || (currentHour == endHour && currentMinute > endMinute) {
                break
            }
        }

        return times
    }

    // ‚úÖ ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
    private func removeAllWaterAlerts() {
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
        print("üóëÔ∏è All water reminders removed.")
    }

    func triggerMoveAlert() {
        if !isAlertActive {
            let content = UNMutableNotificationContent()
            content.title = "‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
            content.body = "‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏±‡πà‡∏á‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!"
            content.sound = .default

            let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 3600, repeats: true) // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            let request = UNNotificationRequest(identifier: "moveReminder", content: content, trigger: trigger)

            UNUserNotificationCenter.current().add(request) { error in
                if let error = error {
                    print("Error triggering move alert: \(error.localizedDescription)")
                } else {
                    print("Move alert scheduled successfully")
                    self.isAlertActive = true
                }
            }
        } else {
            print("Move alert is already active.")
        }
    }

    func triggerHeartRateAlert() {
        print("üö® Attempting to trigger heart rate alert...")

        if isHeartRateAlertActive {
            print("‚ö†Ô∏è Heart rate alert is already active, skipping new alert.")
            return
        }

        isHeartRateAlertActive = true

        let content = UNMutableNotificationContent()
        content.title = "üö® ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏π‡∏á!"
        content.body = "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
        content.sound = UNNotificationSound.defaultCriticalSound(withAudioVolume: 1.0)

        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        let request = UNNotificationRequest(identifier: "heartRateAlert_\(UUID().uuidString)", content: content, trigger: trigger)

        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("‚ùå Error triggering heart rate alert: \(error.localizedDescription)")
            } else {
                print("‚úÖ Heart rate alert scheduled successfully")
                self.playSystemAlarm()
            }
        }

        scheduleNextHeartRateAlertAfterDelay()
    }

    func playSystemAlarm() {
        print("üîä Playing System Sound 1005 (Alarm)")
        AudioServicesPlaySystemSound(soundID)
    }

    func stopSystemAlarm() {
        print("üîá Stopping System Sound 1005 (Alarm)")
        AudioServicesDisposeSystemSoundID(soundID)
    }

    private func scheduleNextHeartRateAlertAfterDelay() {
        print("‚è≥ Starting 90-second cooldown for heart rate alert")

        DispatchQueue.main.asyncAfter(deadline: .now() + 90) {
            self.isHeartRateAlertActive = false
            print("‚úÖ 90 seconds passed, isHeartRateAlertActive set to false")
            self.stopSystemAlarm()
        }
    }
}
