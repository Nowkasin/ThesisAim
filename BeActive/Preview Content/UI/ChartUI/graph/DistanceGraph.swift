//
//  DistanceGraph.swift
//  BeActive
//
//  Created by Kasin Thappawan on 19/2/2568 BE.
//

import SwiftUI
import Charts

struct DistanceGraph: View {
    @StateObject var themeManager = ThemeManager() // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ThemeManager
    var data: [DistanceData] // ‚úÖ ‡πÉ‡∏ä‡πâ DistanceData ‡πÅ‡∏ó‡∏ô Tuple ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
    @State private var selectedData: DistanceData? // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    @State private var tooltipXPosition: CGFloat = .zero // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏Ç‡∏≠‡∏á Tooltip
    @State private var showTooltip: Bool = false // ‚úÖ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Tooltip

    var body: some View {
        GeometryReader { geo in // ‚úÖ ‡πÉ‡∏ä‡πâ GeometryReader ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            ZStack {
                Chart {
                    ForEach(data) { entry in
                        BarMark(
                            x: .value("Time", entry.time),
                            y: .value("Distance", entry.distance)
                        )
                        .foregroundStyle(entry.time.isSameHour(as: Date()) ? Color.red : Color.blue) // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    }
                }
                .chartOverlay { proxy in
                    Rectangle()
                        .fill(Color.clear)
                        .contentShape(Rectangle())
                        .gesture(
                            DragGesture()
                                .onChanged { value in
                                    let position = value.location
                                    if let xDate: Date = proxy.value(atX: position.x) {
                                        if let matchedData = data.first(where: { Calendar.current.isDate($0.time, equalTo: xDate, toGranularity: .hour) }) {
                                            selectedData = matchedData
                                            if let barPositionX = proxy.position(forX: xDate) {
                                                tooltipXPosition = barPositionX // ‚úÖ ‡πÉ‡∏´‡πâ Tooltip ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á Bar
                                            }
                                            showTooltip = true
                                        }
                                    }
                                }
                                .onEnded { _ in
                                    DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                                        showTooltip = false // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô Tooltip ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                                    }
                                }
                        )
                }
                .chartYAxis {
                    AxisMarks(position: .leading) {
                        AxisGridLine()
                        AxisTick()
                        AxisValueLabel()
                    }
                }
                .chartXAxis {
                    AxisMarks {
                        AxisValueLabel(format: .dateTime.hour().minute()) // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ
                    }
                }
                .frame(height: 250)
                .padding()
                .background(RoundedRectangle(cornerRadius: 10).fill(themeManager.backgroundColor)) // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°
                .animation(.easeInOut(duration: 0.3), value: data)

                // ‚úÖ Tooltip ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
                if showTooltip, let selected = selectedData {
                    VStack {
                        Text("\(String(format: "%.2f", selected.distance)) ‡∏Å‡∏°.")
                            .font(.headline)
                            .bold()
                            .foregroundColor(themeManager.textColor) // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á Tooltip ‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°
                            .padding(8)
                            .background(RoundedRectangle(cornerRadius: 10).fill(Color.white).shadow(radius: 5))
                            .offset(x: tooltipXPosition - geo.size.width / 2, y: -120) // ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
                    }
                }
            }
        }
    }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
extension Date {
    func isSameHour(as otherDate: Date) -> Bool {
        let calendar = Calendar.current
        return calendar.isDate(self, equalTo: otherDate, toGranularity: .hour)
    }
}

// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Preview
#Preview {
    DistanceGraph(data: [
        DistanceData(time: Calendar.current.date(byAdding: .hour, value: -5, to: Date())!, distance: 1.2),
        DistanceData(time: Calendar.current.date(byAdding: .hour, value: -4, to: Date())!, distance: 2.4),
        DistanceData(time: Calendar.current.date(byAdding: .hour, value: -3, to: Date())!, distance: 1.8),
        DistanceData(time: Calendar.current.date(byAdding: .hour, value: -2, to: Date())!, distance: 3.0),
        DistanceData(time: Calendar.current.date(byAdding: .hour, value: -1, to: Date())!, distance: 2.6),
        DistanceData(time: Date(), distance: 3.5) // üî• ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
    ])
}
